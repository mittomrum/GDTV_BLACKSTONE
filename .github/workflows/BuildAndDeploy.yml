name: Build And Deploy üôè

on:
  workflow_dispatch:
  push:
    branches:
      - production


env:
  UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
  ITCH_USERNAME: ${{ secrets.ITCH_USERNAME }}
  ITCH_GAME_ID: ${{ secrets.ITCH_GAME_ID }}

jobs:
  checkLicense:
    name: Check for the Unity license üìß
    runs-on: ubuntu-latest
    env:
      UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
      ITCH_USERNAME: ${{ secrets.ITCH_USERNAME }}
      ITCH_GAME_ID: ${{ secrets.ITCH_GAME_ID }}
    steps:
      - name: Check for missing secrets
        run: |
          if [ -z "${UNITY_LICENSE}" ]; then
            echo "Error: UNITY_LICENSE secret is missing"
            exit 1
          fi
          if [ -z "${ITCH_USERNAME}" ]; then
            echo "Error: ITCH_USERNAME secret is missing"
            exit 1
          fi
          if [ -z "${ITCH_GAME_ID}" ]; then
            echo "Error: ITCH_GAME_ID secret is missing"
            exit 1
          fi

      - name: Success! - Found a license
        if: ${{ startsWith(env.UNITY_LICENSE, '<') }}
        run: exit 0
      - name: Fail - No License XX
        if: ${{ !startsWith(env.UNITY_LICENSE, '<') }}
        run: exit 1


  buildWebGL:
    needs: checkLicense
    name: Build for WebGL üñ•Ô∏è
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Create LFS file list
        run: git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-assets-id
      - name: Restore LFS cache
        uses: actions/cache@v2
        id: lfs-cache
        with:
          path: .git/lfs
          key: ${{ runner.os }}-lfs-${{ hashFiles('.lfs-assets-id') }}
      - name: Git LFS Pull
        run: |
          git lfs pull
          git add .
          git reset --hard

      - name: Restore Library cache
        uses: actions/cache@v2
        id: library-cache
        with:
          path: Library
          key: Library-build-WebGL-${{ hashFiles('.lfs-assets-id') }}
          restore-keys: |
            Library-build-WebGL-
            Library-
      - uses: webbertakken/unity-builder@v2
        with:
          targetPlatform: WebGL
      - uses: actions/upload-artifact@v2
        with:
          name: build-WebGL
          path: build/WebGL


      - name: Save to cache
        uses: actions/cache@v2
        with:
          path: build/WebGL
          key: ${{ runner.os }}-webgl-${{ hashFiles('**/package-lock.json') }}



  Upload_production:
    needs: buildWebGL
    name: Upload production to Itch
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/production'
    strategy:
      matrix:
        template: [WebGL]
        channel: [production]

    steps:
      - uses: actions/download-artifact@v2
        with:
          name: build-WebGL
          path: build/WebGL

      - name: Display structure of root files
        run: ls -R
        working-directory: build/WebGL

      - uses: KikimoraGames/itch-publish@v0.0.3
        with:
          butlerApiKey: ${{ secrets.ITCH_IO_API_KEY }}
          gameData: ./build/${{ matrix.template }}
          itchUsername: ${{ env.ITCH_USERNAME }}
          itchGameId: ${{ env.ITCH_GAME_ID }}
          buildChannel: ${{ matrix.channel }}